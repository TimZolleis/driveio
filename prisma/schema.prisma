// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DrivingSchool {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Image {
  id String @id @default(uuid())

  contentType String
  altText     String?
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model User {
  id              String          @id @default(uuid())
  firstName       String
  lastName        String
  password        String?
  email           String          @unique
  role            ROLE
  admin           Boolean
  setupComplete   Boolean         @default(false)
  registration    Registration?
  profileImage    Image?
  drivingSchool   DrivingSchool   @relation(fields: [drivingSchoolId], references: [id])
  drivingSchoolId String
  studentData     StudentData?
  instructorData  InstructorData?
  managementData  ManagementData?
  blockedSlots    BlockedSlot[]
  lessons         DrivingLesson[]
}

model StudentData {
  userId        String        @id
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructorId  String?
  trainingBegin String?
  trainingEnd   String?
  trainingClass String
  dateOfBirth   String
  pickupLat     Float?
  pickupLng     Float?
  waitingTime   Float
  trainingPhase TrainingPhase
}

model InstructorData {
  userId                    String  @id
  user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyDrivingMinutes       Float   @default(415)
  workStartTime             String  @default("08:00")
  workEndTime               String  @default("17:00")
  enableSaturday            Boolean @default(false)
  enableSunday              Boolean @default(false)
  maxDefaultLessons         Int     @default(3)
  maxExtensiveLessons       Int     @default(4)
  maxExampreparationLessons Int     @default(5)
}

enum TrainingPhase {
  DEFAULT
  EXTENSIVE
  EXAM_PREPARATION
}

model BlockedSlot {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  name      String? @default("Blockierter Zeitraum")
  startDate String
  endDate   String
  repeat    REPEAT
}
enum REPEAT {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model ManagementData {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])
}

model Registration {
  id        String   @id @default(uuid())
  code      Int      @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum ROLE {
  STUDENT
  INSTRUCTOR
  MANAGEMENT
}

model DrivingLesson {
  id           String       @id @default(uuid())
  userId       String
  student      User         @relation(fields: [userId], references: [id])
  instructorId String
  start        String
  end          String
  status       LessonStatus
  cancelledBy  String?
  cancelledAt  String?
  description  String?
}

enum LessonStatus {
  REQUESTED
  CONFIRMED
  DECLINED
}
