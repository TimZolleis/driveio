// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DrivingSchool {
  id               String @id @default(uuid())
  name             String
  contactFirstName String
  contactLastName  String
  contactEmail     String
  contactPhone     String
  address          String

  description    String?
  users          User[]
  licenseClasses LicenseClass[]
  lessonTypes    LessonType[]
}

model LicenseClass {
  id              String                   @id @default(uuid())
  drivingSchoolId String
  drivingSchool   DrivingSchool            @relation(fields: [drivingSchoolId], references: [id])
  name            String                   @unique
  lessonTypes     LessonTypeLicenseClass[]
  studentData     StudentData[]
}

model LessonType {
  id              String                   @id @default(uuid())
  drivingSchoolId String
  drivingSchool   DrivingSchool            @relation(fields: [drivingSchoolId], references: [id])
  name            String
  color           String
  index           Int
  studentData     StudentData[]
  licenseClasses  LessonTypeLicenseClass[]
  lessons         DrivingLesson[]
}

model LessonTypeLicenseClass {
  licenseClassId String
  licenseClass   LicenseClass @relation(fields: [licenseClassId], references: [id], onDelete: Cascade)
  lessonTypeId   String
  lessonType     LessonType   @relation(fields: [lessonTypeId], references: [id], onDelete: Cascade)
  minimumDrives  Int

  @@id([licenseClassId, lessonTypeId])
}

model Image {
  id String @id @default(uuid())

  contentType String
  altText     String?
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model User {
  id                       String                    @id @default(uuid())
  firstName                String
  lastName                 String
  password                 String?
  email                    String                    @unique
  phone                    String?
  role                     ROLE
  admin                    Boolean                   @default(false)
  setupComplete            Boolean                   @default(false)
  enabled                  Boolean                   @default(true)
  registration             Registration?
  profileImage             Image?
  drivingSchool            DrivingSchool             @relation(fields: [drivingSchoolId], references: [id])
  drivingSchoolId          String
  studentData              StudentData?
  instructorData           InstructorData?
  managementData           ManagementData?
  blockedSlots             BlockedSlot[]
  lessons                  DrivingLesson[]           @relation("studentDrivingLessons")
  instructingLessons       DrivingLesson[]           @relation("instructorDrivingLessons")
  permissions              Permission[]
  deleted                  Boolean                   @default(false)
  lessonActions            LessonAction[]
  theoreticalLessons       TheoreticalLesson[]
  theoreticalLessonActions TheoreticalLessonAction[]
}

model Permission {
  id          String @id @default(uuid())
  displayName String
  value       String @unique
  user        User[]
}

model StudentData {
  userId         String        @id
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructorId   String
  trainingBegin  String?
  trainingEnd    String?
  licenseClassId String
  licenseClass   LicenseClass  @relation(fields: [licenseClassId], references: [id], onDelete: Cascade)
  dateOfBirth    String
  lessonTypeId   String?
  lessonType     LessonType?   @relation(fields: [lessonTypeId], references: [id], onDelete: Cascade)
  pickupLat      Float?
  pickupLng      Float?
  waitingTime    Float
  trainingPhase  TrainingPhase
}

model InstructorData {
  userId                    String  @id
  user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyDrivingMinutes       Float   @default(415)
  workStartTime             String  @default("08:00")
  workEndTime               String  @default("17:00")
  enableSaturday            Boolean @default(false)
  enableSunday              Boolean @default(false)
  maxDefaultLessons         Int     @default(3)
  maxExtensiveLessons       Int     @default(4)
  maxExampreparationLessons Int     @default(5)
}

enum TrainingPhase {
  DEFAULT
  EXTENSIVE
  EXAM_PREPARATION
}

model BlockedSlot {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  name      String? @default("Blockierter Zeitraum")
  startDate String
  endDate   String
  repeat    REPEAT
}

enum REPEAT {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model ManagementData {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])
}

model Registration {
  id        String   @id @default(uuid())
  code      Int      @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum ROLE {
  STUDENT
  INSTRUCTOR
  MANAGEMENT
}

model DrivingLesson {
  id            String         @id @default(uuid())
  userId        String
  student       User           @relation(name: "studentDrivingLessons", fields: [userId], references: [id], onDelete: Cascade)
  instructorId  String
  instructor    User           @relation(name: "instructorDrivingLessons", fields: [instructorId], references: [id], onDelete: Cascade)
  start         String
  end           String
  status        LessonStatus
  lessonTypeId  String
  type          LessonType     @relation(fields: [lessonTypeId], references: [id], onDelete: Cascade)
  description   String?
  lessonActions LessonAction[]
}

model LessonAction {
  lessonId  String
  lesson    DrivingLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  createdAt DateTime      @default(now())

  @@id([lessonId, createdAt])
}

model TheoreticalLesson {
  id             String                    @id @default(uuid())
  name           String
  location       String
  start          String
  end            String
  repeatInterval Int
  students       User[]
  actions        TheoreticalLessonAction[]
}

model TheoreticalLessonAction {
  id         String            @id @default(uuid())
  lessonId   String
  lesson     TheoreticalLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId     String
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String
  actionDate String
}

enum LessonStatus {
  REQUESTED
  CONFIRMED
  DECLINED
}
